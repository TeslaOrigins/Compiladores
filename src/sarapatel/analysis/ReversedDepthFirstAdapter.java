/* This file was generated by SableCC (http://www.sablecc.org/). */

package sarapatel.analysis;

import java.util.*;
import sarapatel.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPrograma().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        {
            List<PFimPrograma> copy = new ArrayList<PFimPrograma>(node.getFimPrograma());
            Collections.reverse(copy);
            for(PFimPrograma e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInicioPrograma() != null)
        {
            node.getInicioPrograma().apply(this);
        }
        outAPrograma(node);
    }

    public void inAVazioInicioPrograma(AVazioInicioPrograma node)
    {
        defaultIn(node);
    }

    public void outAVazioInicioPrograma(AVazioInicioPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioInicioPrograma(AVazioInicioPrograma node)
    {
        inAVazioInicioPrograma(node);
        outAVazioInicioPrograma(node);
    }

    public void inADeclaracaoVarInicioPrograma(ADeclaracaoVarInicioPrograma node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoVarInicioPrograma(ADeclaracaoVarInicioPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoVarInicioPrograma(ADeclaracaoVarInicioPrograma node)
    {
        inADeclaracaoVarInicioPrograma(node);
        if(node.getDecVar() != null)
        {
            node.getDecVar().apply(this);
        }
        if(node.getInicioPrograma() != null)
        {
            node.getInicioPrograma().apply(this);
        }
        outADeclaracaoVarInicioPrograma(node);
    }

    public void inADeclaracaoConstInicioPrograma(ADeclaracaoConstInicioPrograma node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoConstInicioPrograma(ADeclaracaoConstInicioPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoConstInicioPrograma(ADeclaracaoConstInicioPrograma node)
    {
        inADeclaracaoConstInicioPrograma(node);
        if(node.getDecCons() != null)
        {
            node.getDecCons().apply(this);
        }
        if(node.getInicioPrograma() != null)
        {
            node.getInicioPrograma().apply(this);
        }
        outADeclaracaoConstInicioPrograma(node);
    }

    public void inAProcedimentoFimPrograma(AProcedimentoFimPrograma node)
    {
        defaultIn(node);
    }

    public void outAProcedimentoFimPrograma(AProcedimentoFimPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcedimentoFimPrograma(AProcedimentoFimPrograma node)
    {
        inAProcedimentoFimPrograma(node);
        if(node.getDecProcedimento() != null)
        {
            node.getDecProcedimento().apply(this);
        }
        outAProcedimentoFimPrograma(node);
    }

    public void inAFuncaoFimPrograma(AFuncaoFimPrograma node)
    {
        defaultIn(node);
    }

    public void outAFuncaoFimPrograma(AFuncaoFimPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoFimPrograma(AFuncaoFimPrograma node)
    {
        inAFuncaoFimPrograma(node);
        if(node.getDecFuncao() != null)
        {
            node.getDecFuncao().apply(this);
        }
        outAFuncaoFimPrograma(node);
    }

    public void inADecVar(ADecVar node)
    {
        defaultIn(node);
    }

    public void outADecVar(ADecVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVar(ADecVar node)
    {
        inADecVar(node);
        if(node.getFechaLinha() != null)
        {
            node.getFechaLinha().apply(this);
        }
        if(node.getIdentificadorComOuSemAtribuicao() != null)
        {
            node.getIdentificadorComOuSemAtribuicao().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getDeclVar() != null)
        {
            node.getDeclVar().apply(this);
        }
        outADecVar(node);
    }

    public void inADecCons(ADecCons node)
    {
        defaultIn(node);
    }

    public void outADecCons(ADecCons node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecCons(ADecCons node)
    {
        inADecCons(node);
        if(node.getFechaLinha() != null)
        {
            node.getFechaLinha().apply(this);
        }
        if(node.getIdAtribuicao() != null)
        {
            node.getIdAtribuicao().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getDeclConst() != null)
        {
            node.getDeclConst().apply(this);
        }
        outADecCons(node);
    }

    public void inAIdIdentificadorComOuSemAtribuicao(AIdIdentificadorComOuSemAtribuicao node)
    {
        defaultIn(node);
    }

    public void outAIdIdentificadorComOuSemAtribuicao(AIdIdentificadorComOuSemAtribuicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdIdentificadorComOuSemAtribuicao(AIdIdentificadorComOuSemAtribuicao node)
    {
        inAIdIdentificadorComOuSemAtribuicao(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIdIdentificadorComOuSemAtribuicao(node);
    }

    public void inAAtribuicaoIdentificadorComOuSemAtribuicao(AAtribuicaoIdentificadorComOuSemAtribuicao node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoIdentificadorComOuSemAtribuicao(AAtribuicaoIdentificadorComOuSemAtribuicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoIdentificadorComOuSemAtribuicao(AAtribuicaoIdentificadorComOuSemAtribuicao node)
    {
        inAAtribuicaoIdentificadorComOuSemAtribuicao(node);
        if(node.getIdAtribuicao() != null)
        {
            node.getIdAtribuicao().apply(this);
        }
        outAAtribuicaoIdentificadorComOuSemAtribuicao(node);
    }

    public void inABaseTipo(ABaseTipo node)
    {
        defaultIn(node);
    }

    public void outABaseTipo(ABaseTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABaseTipo(ABaseTipo node)
    {
        inABaseTipo(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outABaseTipo(node);
    }

    public void inAArrayTipo(AArrayTipo node)
    {
        defaultIn(node);
    }

    public void outAArrayTipo(AArrayTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayTipo(AArrayTipo node)
    {
        inAArrayTipo(node);
        if(node.getColcheteDir() != null)
        {
            node.getColcheteDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getColcheteEsq() != null)
        {
            node.getColcheteEsq().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAArrayTipo(node);
    }

    public void inAIdAtribuicao(AIdAtribuicao node)
    {
        defaultIn(node);
    }

    public void outAIdAtribuicao(AIdAtribuicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdAtribuicao(AIdAtribuicao node)
    {
        inAIdAtribuicao(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIdAtribuicao(node);
    }

    public void inAArrayComp(AArrayComp node)
    {
        defaultIn(node);
    }

    public void outAArrayComp(AArrayComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayComp(AArrayComp node)
    {
        inAArrayComp(node);
        if(node.getColcheteDir() != null)
        {
            node.getColcheteDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSeparador() != null)
        {
            node.getSeparador().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getColcheteEsq() != null)
        {
            node.getColcheteEsq().apply(this);
        }
        outAArrayComp(node);
    }

    public void inADecProcedimento(ADecProcedimento node)
    {
        defaultIn(node);
    }

    public void outADecProcedimento(ADecProcedimento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecProcedimento(ADecProcedimento node)
    {
        inADecProcedimento(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getProcedimento() != null)
        {
            node.getProcedimento().apply(this);
        }
        if(node.getPontoEntradaNull() != null)
        {
            node.getPontoEntradaNull().apply(this);
        }
        outADecProcedimento(node);
    }

    public void inANullPontoEntradaNull(ANullPontoEntradaNull node)
    {
        defaultIn(node);
    }

    public void outANullPontoEntradaNull(ANullPontoEntradaNull node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANullPontoEntradaNull(ANullPontoEntradaNull node)
    {
        inANullPontoEntradaNull(node);
        outANullPontoEntradaNull(node);
    }

    public void inAEntradaPontoEntradaNull(AEntradaPontoEntradaNull node)
    {
        defaultIn(node);
    }

    public void outAEntradaPontoEntradaNull(AEntradaPontoEntradaNull node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEntradaPontoEntradaNull(AEntradaPontoEntradaNull node)
    {
        inAEntradaPontoEntradaNull(node);
        if(node.getPontoEntrada() != null)
        {
            node.getPontoEntrada().apply(this);
        }
        outAEntradaPontoEntradaNull(node);
    }

    public void inADecFuncao(ADecFuncao node)
    {
        defaultIn(node);
    }

    public void outADecFuncao(ADecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncao(ADecFuncao node)
    {
        inADecFuncao(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getFuncao() != null)
        {
            node.getFuncao().apply(this);
        }
        outADecFuncao(node);
    }

    public void inAParamParametros(AParamParametros node)
    {
        defaultIn(node);
    }

    public void outAParamParametros(AParamParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamParametros(AParamParametros node)
    {
        inAParamParametros(node);
        if(node.getFechoParametros() != null)
        {
            node.getFechoParametros().apply(this);
        }
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAParamParametros(node);
    }

    public void inAVazioParametros(AVazioParametros node)
    {
        defaultIn(node);
    }

    public void outAVazioParametros(AVazioParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioParametros(AVazioParametros node)
    {
        inAVazioParametros(node);
        outAVazioParametros(node);
    }

    public void inAVazioFechoParametros(AVazioFechoParametros node)
    {
        defaultIn(node);
    }

    public void outAVazioFechoParametros(AVazioFechoParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioFechoParametros(AVazioFechoParametros node)
    {
        inAVazioFechoParametros(node);
        outAVazioFechoParametros(node);
    }

    public void inAParamFechoParametros(AParamFechoParametros node)
    {
        defaultIn(node);
    }

    public void outAParamFechoParametros(AParamFechoParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamFechoParametros(AParamFechoParametros node)
    {
        inAParamFechoParametros(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        if(node.getSeparador() != null)
        {
            node.getSeparador().apply(this);
        }
        if(node.getFechoParametros() != null)
        {
            node.getFechoParametros().apply(this);
        }
        outAParamFechoParametros(node);
    }

    public void inAParametro(AParametro node)
    {
        defaultIn(node);
    }

    public void outAParametro(AParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametro(AParametro node)
    {
        inAParametro(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getTipoParametro() != null)
        {
            node.getTipoParametro().apply(this);
        }
        outAParametro(node);
    }

    public void inATipoTipoParametro(ATipoTipoParametro node)
    {
        defaultIn(node);
    }

    public void outATipoTipoParametro(ATipoTipoParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoTipoParametro(ATipoTipoParametro node)
    {
        inATipoTipoParametro(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outATipoTipoParametro(node);
    }

    public void inAMatrizTipoParametro(AMatrizTipoParametro node)
    {
        defaultIn(node);
    }

    public void outAMatrizTipoParametro(AMatrizTipoParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatrizTipoParametro(AMatrizTipoParametro node)
    {
        inAMatrizTipoParametro(node);
        if(node.getColcheteDir() != null)
        {
            node.getColcheteDir().apply(this);
        }
        if(node.getColcheteEsq() != null)
        {
            node.getColcheteEsq().apply(this);
        }
        if(node.getTipoParametro() != null)
        {
            node.getTipoParametro().apply(this);
        }
        outAMatrizTipoParametro(node);
    }

    public void inASeCasadoComando(ASeCasadoComando node)
    {
        defaultIn(node);
    }

    public void outASeCasadoComando(ASeCasadoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeCasadoComando(ASeCasadoComando node)
    {
        inASeCasadoComando(node);
        if(node.getSeCasamento() != null)
        {
            node.getSeCasamento().apply(this);
        }
        outASeCasadoComando(node);
    }

    public void inASeNaoCasadoComando(ASeNaoCasadoComando node)
    {
        defaultIn(node);
    }

    public void outASeNaoCasadoComando(ASeNaoCasadoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeNaoCasadoComando(ASeNaoCasadoComando node)
    {
        inASeNaoCasadoComando(node);
        if(node.getSeSemCasamento() != null)
        {
            node.getSeSemCasamento().apply(this);
        }
        outASeNaoCasadoComando(node);
    }

    public void inASeSenaoSeCasamento(ASeSenaoSeCasamento node)
    {
        defaultIn(node);
    }

    public void outASeSenaoSeCasamento(ASeSenaoSeCasamento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeSenaoSeCasamento(ASeSenaoSeCasamento node)
    {
        inASeSenaoSeCasamento(node);
        if(node.getSegundoSe() != null)
        {
            node.getSegundoSe().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getPrimeiroSe() != null)
        {
            node.getPrimeiroSe().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeSenaoSeCasamento(node);
    }

    public void inAEnquantoSeCasamento(AEnquantoSeCasamento node)
    {
        defaultIn(node);
    }

    public void outAEnquantoSeCasamento(AEnquantoSeCasamento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoSeCasamento(AEnquantoSeCasamento node)
    {
        inAEnquantoSeCasamento(node);
        if(node.getSeCasamento() != null)
        {
            node.getSeCasamento().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAEnquantoSeCasamento(node);
    }

    public void inAComandosSeCasamento(AComandosSeCasamento node)
    {
        defaultIn(node);
    }

    public void outAComandosSeCasamento(AComandosSeCasamento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandosSeCasamento(AComandosSeCasamento node)
    {
        inAComandosSeCasamento(node);
        if(node.getComandoAlternativo() != null)
        {
            node.getComandoAlternativo().apply(this);
        }
        outAComandosSeCasamento(node);
    }

    public void inASeComandoSeSemCasamento(ASeComandoSeSemCasamento node)
    {
        defaultIn(node);
    }

    public void outASeComandoSeSemCasamento(ASeComandoSeSemCasamento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComandoSeSemCasamento(ASeComandoSeSemCasamento node)
    {
        inASeComandoSeSemCasamento(node);
        if(node.getComandoAlternativo() != null)
        {
            node.getComandoAlternativo().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeComandoSeSemCasamento(node);
    }

    public void inASeSemCasamentoSeSemCasamento(ASeSemCasamentoSeSemCasamento node)
    {
        defaultIn(node);
    }

    public void outASeSemCasamentoSeSemCasamento(ASeSemCasamentoSeSemCasamento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeSemCasamentoSeSemCasamento(ASeSemCasamentoSeSemCasamento node)
    {
        inASeSemCasamentoSeSemCasamento(node);
        if(node.getSeSemCasamento() != null)
        {
            node.getSeSemCasamento().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeSemCasamentoSeSemCasamento(node);
    }

    public void inAEnquantoSeSemCasamento(AEnquantoSeSemCasamento node)
    {
        defaultIn(node);
    }

    public void outAEnquantoSeSemCasamento(AEnquantoSeSemCasamento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoSeSemCasamento(AEnquantoSeSemCasamento node)
    {
        inAEnquantoSeSemCasamento(node);
        if(node.getSeSemCasamento() != null)
        {
            node.getSeSemCasamento().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAEnquantoSeSemCasamento(node);
    }

    public void inASeSenaoSemCasamentoSeSemCasamento(ASeSenaoSemCasamentoSeSemCasamento node)
    {
        defaultIn(node);
    }

    public void outASeSenaoSemCasamentoSeSemCasamento(ASeSenaoSemCasamentoSeSemCasamento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeSenaoSemCasamentoSeSemCasamento(ASeSenaoSemCasamentoSeSemCasamento node)
    {
        inASeSenaoSemCasamentoSeSemCasamento(node);
        if(node.getSeSemCasamento() != null)
        {
            node.getSeSemCasamento().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getSeCasamento() != null)
        {
            node.getSeCasamento().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeSenaoSemCasamentoSeSemCasamento(node);
    }

    public void inAAtribuicaoComandoAlternativo(AAtribuicaoComandoAlternativo node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoComandoAlternativo(AAtribuicaoComandoAlternativo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoComandoAlternativo(AAtribuicaoComandoAlternativo node)
    {
        inAAtribuicaoComandoAlternativo(node);
        if(node.getFechaLinha() != null)
        {
            node.getFechaLinha().apply(this);
        }
        if(node.getIdAtribuicao() != null)
        {
            node.getIdAtribuicao().apply(this);
        }
        outAAtribuicaoComandoAlternativo(node);
    }

    public void inAChamadaProcComandoAlternativo(AChamadaProcComandoAlternativo node)
    {
        defaultIn(node);
    }

    public void outAChamadaProcComandoAlternativo(AChamadaProcComandoAlternativo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaProcComandoAlternativo(AChamadaProcComandoAlternativo node)
    {
        inAChamadaProcComandoAlternativo(node);
        if(node.getFechaLinha() != null)
        {
            node.getFechaLinha().apply(this);
        }
        if(node.getChamadaProcedimento() != null)
        {
            node.getChamadaProcedimento().apply(this);
        }
        outAChamadaProcComandoAlternativo(node);
    }

    public void inABlocoComandoAlternativo(ABlocoComandoAlternativo node)
    {
        defaultIn(node);
    }

    public void outABlocoComandoAlternativo(ABlocoComandoAlternativo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComandoAlternativo(ABlocoComandoAlternativo node)
    {
        inABlocoComandoAlternativo(node);
        if(node.getBlocoComandos() != null)
        {
            node.getBlocoComandos().apply(this);
        }
        outABlocoComandoAlternativo(node);
    }

    public void inABlocoComandos(ABlocoComandos node)
    {
        defaultIn(node);
    }

    public void outABlocoComandos(ABlocoComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComandos(ABlocoComandos node)
    {
        inABlocoComandos(node);
        if(node.getTermine() != null)
        {
            node.getTermine().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDecVarCons> copy = new ArrayList<PDecVarCons>(node.getDecVarCons());
            Collections.reverse(copy);
            for(PDecVarCons e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getComece() != null)
        {
            node.getComece().apply(this);
        }
        outABlocoComandos(node);
    }

    public void inADeclaracaoVariavelDecVarCons(ADeclaracaoVariavelDecVarCons node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoVariavelDecVarCons(ADeclaracaoVariavelDecVarCons node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoVariavelDecVarCons(ADeclaracaoVariavelDecVarCons node)
    {
        inADeclaracaoVariavelDecVarCons(node);
        if(node.getDecVar() != null)
        {
            node.getDecVar().apply(this);
        }
        outADeclaracaoVariavelDecVarCons(node);
    }

    public void inADeclaracaoConstanteDecVarCons(ADeclaracaoConstanteDecVarCons node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoConstanteDecVarCons(ADeclaracaoConstanteDecVarCons node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoConstanteDecVarCons(ADeclaracaoConstanteDecVarCons node)
    {
        inADeclaracaoConstanteDecVarCons(node);
        if(node.getDecCons() != null)
        {
            node.getDecCons().apply(this);
        }
        outADeclaracaoConstanteDecVarCons(node);
    }

    public void inARealValor(ARealValor node)
    {
        defaultIn(node);
    }

    public void outARealValor(ARealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealValor(ARealValor node)
    {
        inARealValor(node);
        if(node.getNumReal() != null)
        {
            node.getNumReal().apply(this);
        }
        outARealValor(node);
    }

    public void inADecimalValor(ADecimalValor node)
    {
        defaultIn(node);
    }

    public void outADecimalValor(ADecimalValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecimalValor(ADecimalValor node)
    {
        inADecimalValor(node);
        if(node.getNumDecimal() != null)
        {
            node.getNumDecimal().apply(this);
        }
        outADecimalValor(node);
    }

    public void inANumBinarioValor(ANumBinarioValor node)
    {
        defaultIn(node);
    }

    public void outANumBinarioValor(ANumBinarioValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumBinarioValor(ANumBinarioValor node)
    {
        inANumBinarioValor(node);
        if(node.getNumBinario() != null)
        {
            node.getNumBinario().apply(this);
        }
        outANumBinarioValor(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValor(node);
    }

    public void inAIdValor(AIdValor node)
    {
        defaultIn(node);
    }

    public void outAIdValor(AIdValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdValor(AIdValor node)
    {
        inAIdValor(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIdValor(node);
    }

    public void inAArrayValor(AArrayValor node)
    {
        defaultIn(node);
    }

    public void outAArrayValor(AArrayValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayValor(AArrayValor node)
    {
        inAArrayValor(node);
        if(node.getColcheteDir() != null)
        {
            node.getColcheteDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getColcheteEsq() != null)
        {
            node.getColcheteEsq().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAArrayValor(node);
    }

    public void inAVerdadeValor(AVerdadeValor node)
    {
        defaultIn(node);
    }

    public void outAVerdadeValor(AVerdadeValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVerdadeValor(AVerdadeValor node)
    {
        inAVerdadeValor(node);
        if(node.getVerdadeiro() != null)
        {
            node.getVerdadeiro().apply(this);
        }
        outAVerdadeValor(node);
    }

    public void inAFalsoValor(AFalsoValor node)
    {
        defaultIn(node);
    }

    public void outAFalsoValor(AFalsoValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalsoValor(AFalsoValor node)
    {
        inAFalsoValor(node);
        if(node.getFalso() != null)
        {
            node.getFalso().apply(this);
        }
        outAFalsoValor(node);
    }

    public void inABlocoExp(ABlocoExp node)
    {
        defaultIn(node);
    }

    public void outABlocoExp(ABlocoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoExp(ABlocoExp node)
    {
        inABlocoExp(node);
        if(node.getBlocoExpressoes() != null)
        {
            node.getBlocoExpressoes().apply(this);
        }
        outABlocoExp(node);
    }

    public void inABooleanoExp(ABooleanoExp node)
    {
        defaultIn(node);
    }

    public void outABooleanoExp(ABooleanoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanoExp(ABooleanoExp node)
    {
        inABooleanoExp(node);
        if(node.getExpBooleanoEOu() != null)
        {
            node.getExpBooleanoEOu().apply(this);
        }
        outABooleanoExp(node);
    }

    public void inAExpSomaExpBooleanoEOu(AExpSomaExpBooleanoEOu node)
    {
        defaultIn(node);
    }

    public void outAExpSomaExpBooleanoEOu(AExpSomaExpBooleanoEOu node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpSomaExpBooleanoEOu(AExpSomaExpBooleanoEOu node)
    {
        inAExpSomaExpBooleanoEOu(node);
        if(node.getExpNegacao() != null)
        {
            node.getExpNegacao().apply(this);
        }
        outAExpSomaExpBooleanoEOu(node);
    }

    public void inABooleanoOuExpBooleanoEOu(ABooleanoOuExpBooleanoEOu node)
    {
        defaultIn(node);
    }

    public void outABooleanoOuExpBooleanoEOu(ABooleanoOuExpBooleanoEOu node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanoOuExpBooleanoEOu(ABooleanoOuExpBooleanoEOu node)
    {
        inABooleanoOuExpBooleanoEOu(node);
        if(node.getExpNegacao() != null)
        {
            node.getExpNegacao().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getExpBooleanoEOu() != null)
        {
            node.getExpBooleanoEOu().apply(this);
        }
        outABooleanoOuExpBooleanoEOu(node);
    }

    public void inABooleanoEExpBooleanoEOu(ABooleanoEExpBooleanoEOu node)
    {
        defaultIn(node);
    }

    public void outABooleanoEExpBooleanoEOu(ABooleanoEExpBooleanoEOu node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanoEExpBooleanoEOu(ABooleanoEExpBooleanoEOu node)
    {
        inABooleanoEExpBooleanoEOu(node);
        if(node.getExpNegacao() != null)
        {
            node.getExpNegacao().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getExpBooleanoEOu() != null)
        {
            node.getExpBooleanoEOu().apply(this);
        }
        outABooleanoEExpBooleanoEOu(node);
    }

    public void inAExpNegacaoExpNegacao(AExpNegacaoExpNegacao node)
    {
        defaultIn(node);
    }

    public void outAExpNegacaoExpNegacao(AExpNegacaoExpNegacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpNegacaoExpNegacao(AExpNegacaoExpNegacao node)
    {
        inAExpNegacaoExpNegacao(node);
        if(node.getExpNegacao() != null)
        {
            node.getExpNegacao().apply(this);
        }
        if(node.getNegacao() != null)
        {
            node.getNegacao().apply(this);
        }
        outAExpNegacaoExpNegacao(node);
    }

    public void inAExpBooleanoCmpExpNegacao(AExpBooleanoCmpExpNegacao node)
    {
        defaultIn(node);
    }

    public void outAExpBooleanoCmpExpNegacao(AExpBooleanoCmpExpNegacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpBooleanoCmpExpNegacao(AExpBooleanoCmpExpNegacao node)
    {
        inAExpBooleanoCmpExpNegacao(node);
        if(node.getExpBooleanoCmp() != null)
        {
            node.getExpBooleanoCmp().apply(this);
        }
        outAExpBooleanoCmpExpNegacao(node);
    }

    public void inAExpOpSomaExpBooleanoCmp(AExpOpSomaExpBooleanoCmp node)
    {
        defaultIn(node);
    }

    public void outAExpOpSomaExpBooleanoCmp(AExpOpSomaExpBooleanoCmp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpOpSomaExpBooleanoCmp(AExpOpSomaExpBooleanoCmp node)
    {
        inAExpOpSomaExpBooleanoCmp(node);
        if(node.getExpOpSoma() != null)
        {
            node.getExpOpSoma().apply(this);
        }
        outAExpOpSomaExpBooleanoCmp(node);
    }

    public void inAComparacaoMaiorExpBooleanoCmp(AComparacaoMaiorExpBooleanoCmp node)
    {
        defaultIn(node);
    }

    public void outAComparacaoMaiorExpBooleanoCmp(AComparacaoMaiorExpBooleanoCmp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparacaoMaiorExpBooleanoCmp(AComparacaoMaiorExpBooleanoCmp node)
    {
        inAComparacaoMaiorExpBooleanoCmp(node);
        if(node.getExpOpSoma() != null)
        {
            node.getExpOpSoma().apply(this);
        }
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        if(node.getExpBooleanoCmp() != null)
        {
            node.getExpBooleanoCmp().apply(this);
        }
        outAComparacaoMaiorExpBooleanoCmp(node);
    }

    public void inAComparacaoMaiorIgualExpBooleanoCmp(AComparacaoMaiorIgualExpBooleanoCmp node)
    {
        defaultIn(node);
    }

    public void outAComparacaoMaiorIgualExpBooleanoCmp(AComparacaoMaiorIgualExpBooleanoCmp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparacaoMaiorIgualExpBooleanoCmp(AComparacaoMaiorIgualExpBooleanoCmp node)
    {
        inAComparacaoMaiorIgualExpBooleanoCmp(node);
        if(node.getExpOpSoma() != null)
        {
            node.getExpOpSoma().apply(this);
        }
        if(node.getMaiorIgual() != null)
        {
            node.getMaiorIgual().apply(this);
        }
        if(node.getExpBooleanoCmp() != null)
        {
            node.getExpBooleanoCmp().apply(this);
        }
        outAComparacaoMaiorIgualExpBooleanoCmp(node);
    }

    public void inAComparacaoIgualExpBooleanoCmp(AComparacaoIgualExpBooleanoCmp node)
    {
        defaultIn(node);
    }

    public void outAComparacaoIgualExpBooleanoCmp(AComparacaoIgualExpBooleanoCmp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparacaoIgualExpBooleanoCmp(AComparacaoIgualExpBooleanoCmp node)
    {
        inAComparacaoIgualExpBooleanoCmp(node);
        if(node.getExpOpSoma() != null)
        {
            node.getExpOpSoma().apply(this);
        }
        if(node.getIgualdade() != null)
        {
            node.getIgualdade().apply(this);
        }
        if(node.getExpBooleanoCmp() != null)
        {
            node.getExpBooleanoCmp().apply(this);
        }
        outAComparacaoIgualExpBooleanoCmp(node);
    }

    public void inAOp2ExpOpSoma(AOp2ExpOpSoma node)
    {
        defaultIn(node);
    }

    public void outAOp2ExpOpSoma(AOp2ExpOpSoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOp2ExpOpSoma(AOp2ExpOpSoma node)
    {
        inAOp2ExpOpSoma(node);
        if(node.getExpSubtracao() != null)
        {
            node.getExpSubtracao().apply(this);
        }
        outAOp2ExpOpSoma(node);
    }

    public void inASomaExpOpSoma(ASomaExpOpSoma node)
    {
        defaultIn(node);
    }

    public void outASomaExpOpSoma(ASomaExpOpSoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExpOpSoma(ASomaExpOpSoma node)
    {
        inASomaExpOpSoma(node);
        if(node.getExpSubtracao() != null)
        {
            node.getExpSubtracao().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getExpOpSoma() != null)
        {
            node.getExpOpSoma().apply(this);
        }
        outASomaExpOpSoma(node);
    }

    public void inAMenosSubtracaoExpSubtracao(AMenosSubtracaoExpSubtracao node)
    {
        defaultIn(node);
    }

    public void outAMenosSubtracaoExpSubtracao(AMenosSubtracaoExpSubtracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosSubtracaoExpSubtracao(AMenosSubtracaoExpSubtracao node)
    {
        inAMenosSubtracaoExpSubtracao(node);
        if(node.getExpOpMult() != null)
        {
            node.getExpOpMult().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getExpSubtracao() != null)
        {
            node.getExpSubtracao().apply(this);
        }
        outAMenosSubtracaoExpSubtracao(node);
    }

    public void inAExpOpMultExpSubtracao(AExpOpMultExpSubtracao node)
    {
        defaultIn(node);
    }

    public void outAExpOpMultExpSubtracao(AExpOpMultExpSubtracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpOpMultExpSubtracao(AExpOpMultExpSubtracao node)
    {
        inAExpOpMultExpSubtracao(node);
        if(node.getExpOpMult() != null)
        {
            node.getExpOpMult().apply(this);
        }
        outAExpOpMultExpSubtracao(node);
    }

    public void inAExpValExpOpMult(AExpValExpOpMult node)
    {
        defaultIn(node);
    }

    public void outAExpValExpOpMult(AExpValExpOpMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpValExpOpMult(AExpValExpOpMult node)
    {
        inAExpValExpOpMult(node);
        if(node.getExpTernario() != null)
        {
            node.getExpTernario().apply(this);
        }
        outAExpValExpOpMult(node);
    }

    public void inAMultiplicacaoExpOpMult(AMultiplicacaoExpOpMult node)
    {
        defaultIn(node);
    }

    public void outAMultiplicacaoExpOpMult(AMultiplicacaoExpOpMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicacaoExpOpMult(AMultiplicacaoExpOpMult node)
    {
        inAMultiplicacaoExpOpMult(node);
        if(node.getExpTernario() != null)
        {
            node.getExpTernario().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getExpOpMult() != null)
        {
            node.getExpOpMult().apply(this);
        }
        outAMultiplicacaoExpOpMult(node);
    }

    public void inADivisaoExpOpMult(ADivisaoExpOpMult node)
    {
        defaultIn(node);
    }

    public void outADivisaoExpOpMult(ADivisaoExpOpMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisaoExpOpMult(ADivisaoExpOpMult node)
    {
        inADivisaoExpOpMult(node);
        if(node.getExpTernario() != null)
        {
            node.getExpTernario().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getExpOpMult() != null)
        {
            node.getExpOpMult().apply(this);
        }
        outADivisaoExpOpMult(node);
    }

    public void inARestoExpOpMult(ARestoExpOpMult node)
    {
        defaultIn(node);
    }

    public void outARestoExpOpMult(ARestoExpOpMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARestoExpOpMult(ARestoExpOpMult node)
    {
        inARestoExpOpMult(node);
        if(node.getExpTernario() != null)
        {
            node.getExpTernario().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getExpOpMult() != null)
        {
            node.getExpOpMult().apply(this);
        }
        outARestoExpOpMult(node);
    }

    public void inATernarioExpTernario(ATernarioExpTernario node)
    {
        defaultIn(node);
    }

    public void outATernarioExpTernario(ATernarioExpTernario node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATernarioExpTernario(ATernarioExpTernario node)
    {
        inATernarioExpTernario(node);
        if(node.getValorSeFalso() != null)
        {
            node.getValorSeFalso().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getValorSeVerdadeiro() != null)
        {
            node.getValorSeVerdadeiro().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getCondicao() != null)
        {
            node.getCondicao().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outATernarioExpTernario(node);
    }

    public void inAExpValExpTernario(AExpValExpTernario node)
    {
        defaultIn(node);
    }

    public void outAExpValExpTernario(AExpValExpTernario node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpValExpTernario(AExpValExpTernario node)
    {
        inAExpValExpTernario(node);
        if(node.getExpNegativo() != null)
        {
            node.getExpNegativo().apply(this);
        }
        outAExpValExpTernario(node);
    }

    public void inAExpNegativoExpNegativo(AExpNegativoExpNegativo node)
    {
        defaultIn(node);
    }

    public void outAExpNegativoExpNegativo(AExpNegativoExpNegativo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpNegativoExpNegativo(AExpNegativoExpNegativo node)
    {
        inAExpNegativoExpNegativo(node);
        if(node.getExpNegativo() != null)
        {
            node.getExpNegativo().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outAExpNegativoExpNegativo(node);
    }

    public void inAExpValExpNegativo(AExpValExpNegativo node)
    {
        defaultIn(node);
    }

    public void outAExpValExpNegativo(AExpValExpNegativo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpValExpNegativo(AExpValExpNegativo node)
    {
        inAExpValExpNegativo(node);
        if(node.getExpVal() != null)
        {
            node.getExpVal().apply(this);
        }
        outAExpValExpNegativo(node);
    }

    public void inAArrayExpVal(AArrayExpVal node)
    {
        defaultIn(node);
    }

    public void outAArrayExpVal(AArrayExpVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayExpVal(AArrayExpVal node)
    {
        inAArrayExpVal(node);
        if(node.getArrayComp() != null)
        {
            node.getArrayComp().apply(this);
        }
        outAArrayExpVal(node);
    }

    public void inAParenteseExpVal(AParenteseExpVal node)
    {
        defaultIn(node);
    }

    public void outAParenteseExpVal(AParenteseExpVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenteseExpVal(AParenteseExpVal node)
    {
        inAParenteseExpVal(node);
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        outAParenteseExpVal(node);
    }

    public void inATipoBaseExpVal(ATipoBaseExpVal node)
    {
        defaultIn(node);
    }

    public void outATipoBaseExpVal(ATipoBaseExpVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoBaseExpVal(ATipoBaseExpVal node)
    {
        inATipoBaseExpVal(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outATipoBaseExpVal(node);
    }

    public void inAFuncaoExpVal(AFuncaoExpVal node)
    {
        defaultIn(node);
    }

    public void outAFuncaoExpVal(AFuncaoExpVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoExpVal(AFuncaoExpVal node)
    {
        inAFuncaoExpVal(node);
        if(node.getChamadaFuncao() != null)
        {
            node.getChamadaFuncao().apply(this);
        }
        outAFuncaoExpVal(node);
    }

    public void inAValorExpVal(AValorExpVal node)
    {
        defaultIn(node);
    }

    public void outAValorExpVal(AValorExpVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorExpVal(AValorExpVal node)
    {
        inAValorExpVal(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorExpVal(node);
    }

    public void inABlocoExpressoes(ABlocoExpressoes node)
    {
        defaultIn(node);
    }

    public void outABlocoExpressoes(ABlocoExpressoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoExpressoes(ABlocoExpressoes node)
    {
        inABlocoExpressoes(node);
        if(node.getTermine() != null)
        {
            node.getTermine().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PDecCons> copy = new ArrayList<PDecCons>(node.getDecCons());
            Collections.reverse(copy);
            for(PDecCons e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getComece() != null)
        {
            node.getComece().apply(this);
        }
        outABlocoExpressoes(node);
    }

    public void inAChamadaFuncao(AChamadaFuncao node)
    {
        defaultIn(node);
    }

    public void outAChamadaFuncao(AChamadaFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaFuncao(AChamadaFuncao node)
    {
        inAChamadaFuncao(node);
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getListaExp() != null)
        {
            node.getListaExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAChamadaFuncao(node);
    }

    public void inAChamadaProcedimento(AChamadaProcedimento node)
    {
        defaultIn(node);
    }

    public void outAChamadaProcedimento(AChamadaProcedimento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaProcedimento(AChamadaProcedimento node)
    {
        inAChamadaProcedimento(node);
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getListaExp() != null)
        {
            node.getListaExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAChamadaProcedimento(node);
    }

    public void inAConteudoListaListaExp(AConteudoListaListaExp node)
    {
        defaultIn(node);
    }

    public void outAConteudoListaListaExp(AConteudoListaListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConteudoListaListaExp(AConteudoListaListaExp node)
    {
        inAConteudoListaListaExp(node);
        if(node.getSeparadorListaExp() != null)
        {
            node.getSeparadorListaExp().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAConteudoListaListaExp(node);
    }

    public void inAListaVaziaListaExp(AListaVaziaListaExp node)
    {
        defaultIn(node);
    }

    public void outAListaVaziaListaExp(AListaVaziaListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaVaziaListaExp(AListaVaziaListaExp node)
    {
        inAListaVaziaListaExp(node);
        outAListaVaziaListaExp(node);
    }

    public void inAListaExpSeparadorListaExp(AListaExpSeparadorListaExp node)
    {
        defaultIn(node);
    }

    public void outAListaExpSeparadorListaExp(AListaExpSeparadorListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaExpSeparadorListaExp(AListaExpSeparadorListaExp node)
    {
        inAListaExpSeparadorListaExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSeparador() != null)
        {
            node.getSeparador().apply(this);
        }
        if(node.getSeparadorListaExp() != null)
        {
            node.getSeparadorListaExp().apply(this);
        }
        outAListaExpSeparadorListaExp(node);
    }

    public void inAVazioSeparadorListaExp(AVazioSeparadorListaExp node)
    {
        defaultIn(node);
    }

    public void outAVazioSeparadorListaExp(AVazioSeparadorListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioSeparadorListaExp(AVazioSeparadorListaExp node)
    {
        inAVazioSeparadorListaExp(node);
        outAVazioSeparadorListaExp(node);
    }
}
